KiwiCLI Final Execution Plan

Overview:
KiwiCLI is a command-line interface application designed to manage users, portfolios, and stock transactions. The application is structured into three primary layers: Domain, Services, and CLI (Interface). This separation ensures modularity, testability, and maintainability.

Module Relationships:
1. Domain Layer:
   - Contains core business objects: User, Portfolio, Stock.
   - Each class encapsulates attributes and methods relevant to the entity.
   - Independent of CLI and Services layers.

2. Services Layer:
   - Implements business logic using Domain objects.
   - UserService: Manages user-related operations (add, delete, modify).
   - PortfolioService: Handles portfolio operations (view balance, view percentage).
   - StockService: Manages stock transactions (buy, sell).
   - Services interact with the database to persist and retrieve data.

3. CLI Layer:
   - Handles user interaction via menus and commands.
   - Uses Services to perform operations.
   - Contains menu_printer.py responsible for displaying menus and prompts.
   - Other CLI modules handle input processing and command dispatch.

Contracts Between menu_printer.py and Other Modules:
- menu_printer.py provides functions to display menus and collect user input.
- It returns user selections as standardized codes or strings.
- Other CLI modules call menu_printer functions to show menus and receive input.
- The CLI modules interpret input and call appropriate Service methods.
- menu_printer.py does not perform business logic or data manipulation.
- It only handles presentation and input collection.

Menu Mapping and Control Flow:
- Main Menu:
  Options:
    1. Login
    2. Exit
- Login Menu:
  Options:
    1. Manage Users
    2. Manage Portfolios
    3. Logout
- Manage Users Menu:
  Options:
    1. Add User
    2. Delete User
    3. Modify User
    4. Back
- Manage Portfolios Menu:
  Options:
    1. View Balance
    2. View Percentage
    3. Back
- Stock Transactions Menu:
  Options:
    1. Buy Stock
    2. Sell Stock
    3. Back

Control Flow:
- The main CLI loop displays the Main Menu using menu_printer.
- Based on user input, it navigates to Login Menu or exits.
- Within Login Menu, user selects management options.
- Each submenu uses menu_printer to display options and get input.
- User selections trigger calls to Service methods.
- After operations, control returns to the previous menu.
- Input validation and error handling are centralized in CLI modules.
- Exit options terminate the application gracefully.

Implementation Steps:
1. Domain Layer:
   - Create domain/User.py, domain/Portfolio.py, domain/Stock.py.
   - Define classes with attributes and methods as per requirements.
   - Ensure no dependencies on Services or CLI.

2. Services Layer:
   - Create services/UserService.py, services/PortfolioService.py, services/StockService.py.
   - Implement methods to manipulate Domain objects and interact with database.
   - Handle business rules and validations.

3. CLI Layer:
   - Create cli/menu_printer.py to handle all menu displays and input prompts.
   - Create cli/main.py to implement the main control loop.
   - Create additional CLI modules as needed for input processing.
   - Use constants for menu IDs and options to maintain consistency.
   - Integrate CLI with Services to perform requested operations.

4. Testing:
   - Write unit tests for Domain classes.
   - Write unit tests for Service methods.
   - Write integration tests for CLI and Services interaction.
   - Perform manual testing to verify user experience.

5. Refactoring and Optimization:
   - Review code for duplication and complexity.
   - Improve error handling and input validation.
   - Optimize data access patterns.

6. Deployment and Maintenance:
   - Package application with necessary dependencies.
   - Document CLI usage and feature set.
   - Plan for future enhancements and bug fixes.

Summary:
This execution plan ensures a clean separation of concerns, with clear contracts between modules. menu_printer.py is strictly responsible for UI presentation, while CLI modules handle control flow and Services implement business logic. This modular design facilitates testing, maintenance, and future scalability of KiwiCLI.